{"version":3,"sources":["container/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","input","setInput","employees","setEmployees","useEffect","axios","get","then","response","console","log","Object","keys","data","results","className","placeholder","value","onChange","e","preventDefault","target","type","id","scope","onClick","table","rows","switching","i","x","y","shouldSwitch","document","getElementById","length","getElementsByTagName","innerHTML","toLowerCase","parentNode","insertBefore","filter","val","name","first","includes","last","map","employee","src","picture","thumbnail","alt","location","street","number","city","state","postcode","email","phone","login","uuid","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gPAuIeA,G,MAlIF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEiBF,mBAAS,IAF1B,mBAEVG,EAFU,KAECC,EAFD,KAKjBC,qBAAU,WAETC,IAAMC,IAAI,gDAGNC,MAAK,SAACC,GACHC,QAAQC,IAAIC,OAAOC,KAAKJ,EAASK,KAAKC,UACtCX,EAAaK,EAASK,KAAKC,cAGhC,IA4CH,OACE,8BACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sDAEF,qBAAKA,UAAU,MAAf,SACA,uBACAC,YAAc,iBACdC,MAAOjB,EACPkB,SApDe,SAACC,GACpBA,EAAEC,iBACFX,QAAQC,IAAIS,EAAEE,OAAOJ,OACrBhB,EAASkB,EAAEE,OAAOJ,QAkDdK,KAAK,WAGL,qBAAKP,UAAU,MAAf,SACE,wBAAOQ,GAAG,UAAV,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,mBACA,qBAAIA,MAAM,MAAV,UAAiB,wBAAQC,QAvDvC,WACE,IAAIC,EAAOC,EAAMC,EAAWC,EAAGC,EAAGC,EAAGC,EAKrC,IAJAN,EAAQO,SAASC,eAAe,WAChCN,GAAY,EAGLA,GAAW,CAMhB,IAJAA,GAAY,EACZD,EAAOD,EAAMC,KAGRE,EAAI,EAAGA,EAAKF,EAAKQ,OAAS,EAAIN,IAQjC,GANAG,GAAe,EAGfF,EAAIH,EAAKE,GAAGO,qBAAqB,MAAM,GACvCL,EAAIJ,EAAKE,EAAI,GAAGO,qBAAqB,MAAM,GAEvCN,EAAEO,UAAUC,cAAgBP,EAAEM,UAAUC,cAAe,CAEzDN,GAAe,EACf,MAGAA,IAGFL,EAAKE,GAAGU,WAAWC,aAAab,EAAKE,EAAI,GAAIF,EAAKE,IAClDD,GAAY,KAyBa,iCAAjB,WACA,oBAAIJ,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,wBAIHtB,EAAUuC,QAAO,SAACC,GAEjB,MAAa,KAAT1C,GAEM0C,EAAIC,KAAKC,MAAMN,cAAcO,SAAS7C,EAAMsC,gBAI5CI,EAAIC,KAAKG,KAAKR,cAAcO,SAAS7C,EAAMsC,eAL5CI,OAKH,KAKLK,KAAI,SAACC,GAAD,OACS,gCACE,+BAEA,6BACE,qBAAKC,IAAKD,EAASE,QAAQC,UAAWC,IAAI,OAE5C,+BACGJ,EAASL,KAAKC,MAAO,IACrBI,EAASL,KAAKG,QAEjB,+BACGE,EAASK,SAASC,OAAOC,OAD5B,KACsCP,EAASK,SAASC,OAAOX,KAAM,IAClEK,EAASK,SAASG,KAFrB,IAE4B,IACzBR,EAASK,SAASI,MAHrB,IAG6B,IAC1BT,EAASK,SAASK,YAErB,6BAAKV,EAASW,QACd,6BAAKX,EAASY,UAhBLZ,EAASa,MAAMC,uBC1FvCC,MAZf,WAGE,OACE,qBAAKhD,UAAU,MAAf,SAEE,cAAC,EAAD,OCGSiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAASC,eAAe,SAM1B8B,M","file":"static/js/main.54806c72.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../container/Home.css\"\r\n\r\n\r\nconst Home = () => {\r\n  const [input, setInput]ã€€= useState('');\r\n  const [employees, setEmployees] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n   \r\n   axios.get(\"https://randomuser.me/api/?results=50&nat=us\"\r\n\r\n   ) \r\n      .then((response)=> {\r\n          console.log(Object.keys(response.data.results));\r\n          setEmployees(response.data.results)\r\n        \r\n      })\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target.value)\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  function sortTable() {\r\n    var table, rows, switching, i, x, y, shouldSwitch;\r\n    table = document.getElementById(\"myTable\");\r\n    switching = true;\r\n    /*Make a loop that will continue until\r\n    no switching has been done:*/\r\n    while (switching) {\r\n      //start by saying: no switching is done:\r\n      switching = false;\r\n      rows = table.rows;\r\n      /*Loop through all table rows (except the\r\n      first, which contains table headers):*/\r\n      for (i = 1; i < (rows.length - 1); i++) {\r\n        //start by saying there should be no switching:\r\n        shouldSwitch = false;\r\n        /*Get the two elements you want to compare,\r\n        one from current row and one from the next:*/\r\n        x = rows[i].getElementsByTagName(\"TD\")[0];\r\n        y = rows[i + 1].getElementsByTagName(\"TD\")[0];\r\n        //check if the two rows should switch place:\r\n        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n          //if so, mark as a switch and break the loop:\r\n          shouldSwitch = true;\r\n          break;\r\n        }\r\n      }\r\n      if (shouldSwitch) {\r\n        /*If a switch has been marked, make the switch\r\n        and mark that a switch has been done:*/\r\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n        switching = true;\r\n      }\r\n    }\r\n  }\r\n \r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h1>Employee Directory</h1>\r\n        </div>\r\n        <div className=\"row\">\r\n        <input\r\n        placeholder = \"Search by Name\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n      />\r\n        </div>\r\n        <div className=\"row\">\r\n          <table id=\"myTable\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Image</th>\r\n                <th scope=\"col\" ><button onClick = {sortTable}>Sort Alphabetically</button> Name</th>\r\n                <th scope=\"col\" >Location</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">Phone</th>\r\n              </tr>\r\n            </thead>\r\n            \r\n            {employees.filter((val) => {\r\n              \r\n              if (input ===\"\"){\r\n                return val\r\n              }else if (val.name.first.toLowerCase().includes(input.toLowerCase())){\r\n\r\n                return val\r\n\r\n              }else if (val.name.last.toLowerCase().includes(input.toLowerCase())){\r\n                return val\r\n          \r\n              }\r\n\r\n            }).map((employee)=>(\r\n                            <tbody>\r\n                              <tr key={employee.login.uuid}>\r\n                                \r\n                              <th>\r\n                                <img src={employee.picture.thumbnail} alt=\"\" />\r\n                              </th>\r\n                              <td>\r\n                                {employee.name.first}{\" \"}\r\n                                {employee.name.last}\r\n                              </td>\r\n                              <td>\r\n                                {employee.location.street.number}  {employee.location.street.name}{\" \"}\r\n                                {employee.location.city},{\" \"}\r\n                                {employee.location.state},{\" \"}\r\n                                {employee.location.postcode}\r\n                              </td>\r\n                              <td>{employee.email}</td>\r\n                              <td>{employee.phone}</td>\r\n                            </tr>\r\n                          </tbody>\r\n\r\n\r\n            ))}\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import './App.css';\nimport Home from './container/Home'\n\nfunction App() {\n\n \n  return (\n    <div className=\"App\">\n     \n      <Home/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}